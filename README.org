* 言語処理100本ノック version Julia
[[http://www.cl.ecei.tohoku.ac.jp/nlp100/][言語処理100本ノック]]

** chapter1
*** 00.文字列の逆順

#+BEGIN_SRC julia
s = "stressed"
println(reverse(s))
#+END_SRC

*** 01.「パタトクカシーー」

#+BEGIN_SRC julia
const str = split("パタトクカシーー","")

for i in 1:length(str)
    if isodd(i)
      print(str[i])
    end
  end
println()
#+END_SRC

*** 02.「パトカー」＋「タクシー」＝「パタトクカシーー」

#+BEGIN_SRC julia
const a = split("パトカー","")
const b = split("タクシー","")

for i in 1:length(a)
  print(a[i]*b[i])
end
println("")
#+END_SRC

*** 03.円周率

#+BEGIN_SRC julia
map(x->print(length(x)),split(replace("Now I need a drink, alcoholic of course, after the heavy lectures involving quantum mechanics.",r",|\.", "")))
#+END_SRC

*** 04.元素記号

#+BEGIN_SRC julia
const data = split("Hi He Lied Because Boron Could Not Oxidize Fluorine. New Nations Might Also Sign Peace Security Clause. Arthur King Can.")
d = Dict()
const f = [1, 5, 6, 7, 8, 9, 15, 16, 19]

for i = 1:length(data)
  if i in f
    d[data[i][1]] = i
  else
    d[data[i][1:2]] = i
  end
end
println(d)
#+END_SRC

*** 05.n-gram

問題は英語表記だけど，2バイト文字にも対応するために，日本語の例を加えました．

#+BEGIN_SRC julia
function ngram_char(sequence::String ,n::Int64)
  sequence = split(replace(sequence, " ", "_"), "")
  ngrams = String[]
  for i in 1:length(sequence)-n+1
    push!(ngrams, join(sequence[i:i+n-1]))
  end
  ngrams
end

function ngram_array(sequence ,n::Int64)
  ngrams = String[]
  for i in 1:length(sequence)-n+1
    push!(ngrams, join(sequence[i:i+n-1], " "))
  end
  ngrams
end

const str1 = "I am an NLPer"
const str2 = "ヘリウムは少年です"
const n = 2

println(ngram_char(str1, n))
println(ngram_char(str2, n))

const str1_ary = split(str1)
const str2_ary = ["ヘリウム", "は", "少年", "です"]

println(ngram_array(str1_ary,n))
println(ngram_array(str2_ary,n))

#+END_SRC

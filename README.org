* 言語処理100本ノック version Julia
[[http://www.cl.ecei.tohoku.ac.jp/nlp100/][言語処理100本ノック]]

10までやりました(2015/06/19)

** chapter1
*** 00.文字列の逆順

#+BEGIN_SRC julia
s = "stressed"
println(reverse(s))
#+END_SRC

*** 01.「パタトクカシーー」

#+BEGIN_SRC julia
const str = split("パタトクカシーー","")

for i in 1:length(str)
    if isodd(i)
      print(str[i])
    end
  end
println()
#+END_SRC

*** 02.「パトカー」＋「タクシー」＝「パタトクカシーー」

#+BEGIN_SRC julia
const a = split("パトカー","")
const b = split("タクシー","")

for i in 1:length(a)
  print(a[i]*b[i])
end
println("")
#+END_SRC

*** 03.円周率

#+BEGIN_SRC julia
map(x->print(length(x)),split(replace("Now I need a drink, alcoholic of course, after the heavy lectures involving quantum mechanics.",r",|\.", "")))
#+END_SRC

*** 04.元素記号

#+BEGIN_SRC julia
const data = split("Hi He Lied Because Boron Could Not Oxidize Fluorine. New Nations Might Also Sign Peace Security Clause. Arthur King Can.")
d = Dict()
const f = [1, 5, 6, 7, 8, 9, 15, 16, 19]

for i = 1:length(data)
  if i in f
    d[data[i][1]] = i
  else
    d[data[i][1:2]] = i
  end
end
println(d)
#+END_SRC

*** 05.n-gram

問題は英語表記だけど，2バイト文字にも対応するために，日本語の例を加えました．

#+BEGIN_SRC julia
function ngram_char(sequence::String ,n::Int64)
  sequence = split(replace(sequence, " ", "_"), "")
  ngrams = String[]
  for i in 1:length(sequence)-n+1
    push!(ngrams, join(sequence[i:i+n-1]))
  end
  ngrams
end

function ngram_array(sequence ,n::Int64)
  ngrams = String[]
  for i in 1:length(sequence)-n+1
    push!(ngrams, join(sequence[i:i+n-1], " "))
  end
  ngrams
end

str1 = "I am an NLPer"
str2 = "ヘリウムは少年です"
n = 2

println(ngram_char(str1, n))
println(ngram_char(str2, n))

str1_ary = split(str1)
str2_ary = ["ヘリウム", "は", "少年", "です"]

println(ngram_array(str1_ary,n))
println(ngram_array(str2_ary,n))
#+END_SRC

*** 06.集合

05.jlには，05.n-gramの関数のみが定義されているとします．

#+BEGIN_SRC julia
include("05.jl")

str1 = "paraparaparadise"
str2 = "paragraph"
n = 2

x = Set(ngram_char(str1,2))
y = Set(ngram_char(str2,2))

println(union(x, y))
println(intersect(x, y))
println(setdiff(x, y))

println(in("se", x))
println(in("se", y))
#+END_SRC

*** 07.テンプレートによる生成

#+BEGIN_SRC julia
getTemplate(x,y,z) =  string(x) * "時の" * string(y) * "は" * string(z)

println(getTemplate(12,"気温",22.4))
#+END_SRC

*** 08.暗号文
クラスがcharかStringでいろいろとめんどうで複雑な感じになってますが．．．(ほかにいいやり方があったら知りたい．．．)
複合化は略...
#+BEGIN_SRC julia
function chipher(str) 
  result = ""
  for i in  1:length(str)
    if ismatch(r"[0-9A-Za-z]", str[i:i])
      result *= string(219 - int(str[i]))
    else
      result *= str[i:i]
    end
  end
  result
end

println(chipher("Today is a good day to die"))
#+END_SRC

*** 09. Typoglycemia
#+BEGIN_SRC julia
function shuffle_sentence(str::String)
  word_box = split(str)
  n = length(word_box)
  if (n <= 4)
    return str
  end
  result = shuffle(word_box[2:n-1])
  unshift!(result, shift!(word_box))
  push!(result, pop!(word_box))  
  return join(result, " ")
end

str1 = "hoge hoge1"
str2 = "I couldn't believe that I could actually understand what I was reading : the phenomenal power of the human mind ."

println(shuffle_sentence(str1))
println(shuffle_sentence(str2))
#+END_SRC

** chapter2
*** 10. 行数のカウント
example.txtは10.jlと同じ階層にあるテキストファイル(codeの中にあるデータは，ALICE'S ADVENTURES
IN WONDERLANDの第1章)
#+BEGIN_SRC julia
f = open("example.txt")
println(length(readlines(f)))
#+END_SRC

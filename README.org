* 言語処理100本ノック version Julia
  [[http://www.cl.ecei.tohoku.ac.jp/nlp100/][言語処理100本ノック]]

  27までやりました(2015/07/20)

** 環境

- MacOSX(yosemite)
- julia v0.3.*
- emacs (ess+julia-mode)

** chapter1
*** 00.文字列の逆順

#+BEGIN_SRC julia
s = "stressed"
println(reverse(s))
#+END_SRC


*** 01.「パタトクカシーー」

#+BEGIN_SRC julia
const str = split("パタトクカシーー","")

for i in 1:length(str)
    if isodd(i)
      print(str[i])
    end
  end
println()
#+END_SRC


*** 02.「パトカー」＋「タクシー」＝「パタトクカシーー」

#+BEGIN_SRC julia
const a = split("パトカー","")
const b = split("タクシー","")

for i in 1:length(a)
  print(a[i]*b[i])
end
println("")
#+END_SRC


*** 03.円周率

#+BEGIN_SRC julia
map(x->print(length(x)),split(replace("Now I need a drink, alcoholic of course, after the heavy lectures involving quantum mechanics.",r",|\.", "")))
#+END_SRC


*** 04.元素記号

#+BEGIN_SRC julia
const data = split("Hi He Lied Because Boron Could Not Oxidize Fluorine. New Nations Might Also Sign Peace Security Clause. Arthur King Can.")
d = Dict()
const f = [1, 5, 6, 7, 8, 9, 15, 16, 19]

for i = 1:length(data)
  if i in f
    d[data[i][1]] = i
  else
    d[data[i][1:2]] = i
  end
end
println(d)
#+END_SRC


*** 05.n-gram
問題は英語表記だけど，2バイト文字にも対応するために，日本語の例を加えました．

#+BEGIN_SRC julia
function ngram_char(sequence::String ,n::Int64)
  sequence = split(replace(sequence, " ", "_"), "")
  ngrams = String[]
  for i in 1:length(sequence)-n+1
    push!(ngrams, join(sequence[i:i+n-1]))
  end
  ngrams
end

function ngram_array(sequence ,n::Int64)
  ngrams = String[]
  for i in 1:length(sequence)-n+1
    push!(ngrams, join(sequence[i:i+n-1], " "))
  end
  ngrams
end

str1 = "I am an NLPer"
str2 = "ヘリウムは少年です"
n = 2

println(ngram_char(str1, n))
println(ngram_char(str2, n))

str1_ary = split(str1)
str2_ary = ["ヘリウム", "は", "少年", "です"]

println(ngram_array(str1_ary,n))
println(ngram_array(str2_ary,n))
#+END_SRC


*** 06.集合
05.jlには，05.n-gramの関数のみが定義されているとします．

#+BEGIN_SRC julia
include("05.jl")

str1 = "paraparaparadise"
str2 = "paragraph"
n = 2

x = Set(ngram_char(str1,2))
y = Set(ngram_char(str2,2))

println(union(x, y))
println(intersect(x, y))
println(setdiff(x, y))

println(in("se", x))
println(in("se", y))
#+END_SRC


*** 07.テンプレートによる生成
#+BEGIN_SRC julia
getTemplate(x,y,z) =  string(x) * "時の" * string(y) * "は" * string(z)

println(getTemplate(12,"気温",22.4))
#+END_SRC


*** 08.暗号文
クラスがcharかStringでいろいろとめんどうで複雑な感じになってますが．．．(ほかにいいやり方があったら知りたい．．．)
複合化は略...
#+BEGIN_SRC julia
function chipher(str)
  result = ""
  for i in  1:length(str)
    if ismatch(r"[0-9A-Za-z]", str[i:i])
      result *= string(219 - int(str[i]))
    else
      result *= str[i:i]
    end
  end
  result
end

println(chipher("Today is a good day to die"))
#+END_SRC


*** 09. Typoglycemia
#+BEGIN_SRC julia
function shuffle_sentence(str::String)
  word_box = split(str)
  n = length(word_box)
  if (n <= 4)
    return str
  end
  result = shuffle(word_box[2:n-1])
  unshift!(result, shift!(word_box))
  push!(result, pop!(word_box))
  return join(result, " ")
end

str1 = "hoge hoge1"
str2 = "I couldn't believe that I could actually understand what I was reading : the phenomenal power of the human mind ."

println(shuffle_sentence(str1))
println(shuffle_sentence(str2))
#+END_SRC

** chapter2
*** 10. 行数のカウント
#+BEGIN_SRC julia
f = open("hightemp.txt")
println(countlines(f))
#+END_SRC


*** 11. タブをスペースに置換
#+BEGIN_SRC julia
f = open("hightemp.txt")
for line in readlines(f)
  print(replace(line,"\t", " "))
end
#+END_SRC


*** 12. 1列目をcol1.txtに，2列目をcol2.txtに保存
#+BEGIN_SRC julia
f = open("hightemp.txt")
col1 = open("col1.txt","w")
col2 = open("col2.txt","w")
for line in readlines(f)
  col = split(chomp(line), "\t")
  println(col1,col[1])
  println(col2,col[2])
end
#+END_SRC


*** 13. col1.txtとcol2.txtをマージ
#+BEGIN_SRC julia
col1 = open("col1.txt")
col2 = open("col2.txt")
merge = open("merge.txt", "w")
for line in readlines(col1)
  c1 = chomp(line)
  c2 = chomp(readline(col2))
  println(merge, join([c1,c2], "\t"))
end
#+END_SRC


*** 14. 先頭からN行を出力
$ haed -n 5 hightemp.txt
と
$ julia 14.jl 5
は同じ
#+BEGIN_SRC julia
f = open("hightemp.txt")
n = int(ARGS[1])

i = 1
while i <= n && !eof(f)
  l = readline(f)
  print(l)
  i += 1
end
#+END_SRC

*** 15. 末尾のN行を出力
$ tail -n 5 hightemp.txt
と
$ julia 15.jl 5
は同じ
#+BEGIN_SRC julia
f = open(readlines, "hightemp.txt")
n = int(ARGS[1])
filelength = length(f)
if n > filelength
  n = filelength
end
s = filelength - n + 1

for l in f[s:filelength]
  print(l)
end
#+END_SRC


*** 16. ファイルをN分割する
#+BEGIN_SRC julia
f = open("hightemp.txt")
n = int(ARGS[1])
filelength = countlines(f)
f = seekstart(f)
sepa = int(trunc(filelength / n))
mod = filelength % n

for i in 1:n
  out = open(string(i)*".txt", "w")
  lines = sepa
  if i <= mod
    lines = sepa + 1
  end

  for j in 1:lines
    print(out,readline(f))
  end
  close(out)
end

#+END_SRC


*** 17. 1列目の文字列の異なり
#+BEGIN_SRC julia
pref = Set()

f = open("hightemp.txt", "r")
for line in readlines(f)
  col1 = split(line, "\t")[1]
  push!(pref,col1)
end
#+END_SRC


*** 18. 各行を3コラム目の数値の降順にソート
DataFrameを使ってるのでちょっと遅いです．．．
型が揃えられるので，実は題意を満たせてない
#+BEGIN_SRC julia
using DataFrames

f =  readtable("hightemp.txt", separator = '\t', header = false)
sort!(f, cols = :x3, rev = true)
println(f)
#+END_SRC


*** 19. 各行の1コラム目の文字列の出現頻度を求め，出現頻度の高い順に並べる

#+BEGIN_SRC julia
f = open("hightemp.txt", "r")
freq = Dict{UTF8String,Int64}()
for line in readlines(f)
  col1 = split(line, "\t")[1]
  freq[col1] = get(freq, col1, 0) + 1 # このgeはkeyがなかったときは0を返す
end

for elem in sort(collect(freq), by = tuple -> last(tuple), rev=true)
  println(join(elem,  "\t"))
end
#+END_SRC


** chapter2 正規表現
*** 20. JSONデータの読み込み
抽出した本文は，jawiki-country.txtとして保存した．
#+BEGIN_SRC julia
f = open("jawiki-country.json", "r")

for line in readlines(f)
  if ismatch(r"\"title\": \"イギリス\"}", line)
    line = replace(line,r"^\{\"text\":\s", "")
    line = replace(line,r",\s\"title\":\s\".+\"\}$", "")
    println(replace(line,"\\n", "\n"))
  end
end
#+END_SRC


*** 21. カテゴリ名を含む行を抽出
#+BEGIN_SRC julia
f = open("jawiki-country.txt", "r")

for line in readlines(f)
  if ismatch(r"\[\[Category:", line)
    print(line)
  end
end
#+END_SRC


*** 22. カテゴリ名の抽出
#+BEGIN_SRC julia
f = open("jawiki-country.txt", "r")

for line in readlines(f)
  category_reg = r"\[\[Category:"
  if ismatch(category_reg, line)
    print(replace(line, r"\[\[Category:|(\|\*)*\]\].*", ""))
  end
end
#+END_SRC


*** 23. セクション構造
内容に直接関係はないけど，matchは見つからないときnothingを返す．
ifで無理に評価させた結果こんなコードに．どうしたらものか．．．
#+BEGIN_SRC julia
f = open("jawiki-country.txt", "r")

for line in readlines(f)
    m = match(r"(^=+)", line)
    if !is(m, nothing)
     level = length(m.captures[1]) - 1
     println(replace(line, r"=|\s", "") * " $level")
   end
end
#+END_SRC


*** 24. ファイル参照の抽出
#+BEGIN_SRC julia
f = open("jawiki-country.txt", "r")

for line in readlines(f)
  if ismatch(r"(\[+)*(ファイル|File)",line)
    m = match(r"(ファイル|File)\:(.*\.\w+)\|", line)
    println(m.captures[2])
  end
end
#+END_SRC


*** 25. テンプレートの抽出
#+BEGIN_SRC julia
f = open("jawiki-country.txt", "r")
dict = Dict()

for line in readlines(f)
  if ismatch(r"^\|.+\s=\s",line)
    m = match(r"^\|(.+)\s=\s(.+)",line)
    dict[m.captures[1]] = m.captures[2]
  end
end

println("key\tvalue")
for k in keys(dict)
  println(k, "\t", dict[k])
end
#+END_SRC


*** 26. 強調マークアップの除去
#+BEGIN_SRC julia
f = open("jawiki-country.txt", "r")

for line in readlines(f)
  if ismatch(r"^\|.+\s=\s",line)
    m = match(r"^\|(.+)\s=\s(.+)",line)
    println(m.captures[1], "\t",replace(m.captures[2], r"'{2,}", ""))
  end
end
#+END_SRC

*** 27. 内部リンクの除去
rubyだとarray[-1]で末尾の要素を取得しますが，juliaだとendがキーワードになっており，
末尾のindexをさしてくれるようです．

#+BEGIN_SRC julia
f = open("jawiki-country.txt", "r")

for line in readlines(f)
  if ismatch(r"^\|.+\s=\s",line)
    m = match(r"^\|(.+)\s=\s(.+)",line)
    attr_str = replace(m.captures[2], r"'{2,}", "")
    str = replace(attr_str, r"\[{2}|\]{2}", "")
    if(str != attr_str)
      println(m.captures[1], "\t", split(str, "|")[end])
    else
      println(m.captures[1], "\t", str)
    end
  end
end
#+END_SRC
